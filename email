stage('Get CAM Passport (auto; fallback to secret)') {
  steps {
    container('python') {
      withCredentials([
        usernamePassword(credentialsId: 'Cognosserviceaccount', usernameVariable: 'COG_USER', passwordVariable: 'COG_PASS'),
        string(credentialsId: 'cognos-cam-passport-prd', variable: 'CAMPASSPORT_FALLBACK') // create this once (Secret Text)
      ]) {
        sh '''
          set -euo pipefail
          rm -f cookies.txt headers.txt login_resp.txt namespaces_target.json || true

          # IMPORTANT: use the PRD Cognos URL (that issues the cookie you saw in the browser)
          BASE="https://dhcsprodcognos.ca.analytics.ibm.com/bi"

          echo ">>> Step 1: Start session (collect cookies; some envs set anti-CSRF here)"
          curl --fail-with-body -sS -c cookies.txt -b cookies.txt -D headers.txt \
               "${BASE}/v1/session" -o /dev/null || true

          # Try to read a common anti-CSRF cookie/token if Cognos sets one (name varies by setup)
          XSRF=$(awk '$1 ~ /^#HttpOnly_/ {sub("^#HttpOnly_", "", $1)} $6 ~ /XSRF|CSRF|cognosXsrf/i {print $7}' cookies.txt | tail -n1 || true)
          if [ -n "${XSRF:-}" ]; then
            echo "Found potential XSRF token cookie."
          else
            echo "No XSRF cookie found; proceeding."
          fi

          echo ">>> Step 2: POST login with namespace credentials"
          cat > login.json <<JSON
{
  "parameters": [
    { "name": "CAMNamespace", "value": "${NAMESPACE_ID}" },
    { "name": "CAMUsername",  "value": "${COG_USER}" },
    { "name": "CAMPassword",  "value": "${COG_PASS}" }
  ]
}
JSON

          set +e
          if [ -n "${XSRF:-}" ]; then
            curl --fail-with-body -sS -c cookies.txt -b cookies.txt -X POST "${BASE}/v1/login" \
                 -H "Content-Type: application/json" \
                 -H "X-XSRF-TOKEN: ${XSRF}" \
                 -d @login.json \
                 -D headers.txt \
                 -o login_resp.txt
          else
            curl --fail-with-body -sS -c cookies.txt -b cookies.txt -X POST "${BASE}/v1/login" \
                 -H "Content-Type: application/json" \
                 -d @login.json \
                 -D headers.txt \
                 -o login_resp.txt
          fi
          rc=$?
          set -e

          if [ $rc -ne 0 ]; then
            echo "Login POST returned non-zero (rc=$rc). Will try fallback credential."
          fi

          echo ">>> Step 3: Extract cam_passport from cookie jar"
          CAM=$(awk '$1 ~ /^#HttpOnly_/ {sub("^#HttpOnly_", "", $1)} $6 ~ /cam_passport/ {print $7}' cookies.txt | tail -n1 || true)

          if [ -z "${CAM:-}" ]; then
            if [ -n "${CAMPASSPORT_FALLBACK:-}" ]; then
              echo "Using fallback CAMPASSPORT from Jenkins Secret (rotate as needed)."
              CAM="${CAMPASSPORT_FALLBACK}"
            else
              echo "ERROR: Could not obtain cam_passport and no fallback Secret provided." >&2
              echo "Capture headers/login_resp for troubleshooting."
              exit 1
            fi
          else
            echo "Obtained fresh cam_passport from Cognos."
          fi

          # Export for later stages (do NOT echo the value)
          printf "CAMPASSPORT=%s\n" "$CAM" >> MotioCI/api/motio_env
        '''
      }
    }
    script {
      def envFile = readFile('MotioCI/api/motio_env').trim()
      envFile.split("\n").each { line ->
        def (k,v) = line.split('=', 2)
        env[k] = v
      }
      echo "camPassportId ready (auto or fallback)."
    }
  }
}
